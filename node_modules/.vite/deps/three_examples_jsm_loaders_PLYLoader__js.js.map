{
  "version": 3,
  "sources": ["../../three/examples/jsm/loaders/PLYLoader.js"],
  "sourcesContent": ["import {\r\n\tBufferGeometry,\r\n\tFileLoader,\r\n\tFloat32BufferAttribute,\r\n\tLoader,\r\n\tColor,\r\n\tSRGBColorSpace\r\n} from 'three';\r\n\r\n/**\r\n * Description: A THREE loader for PLY ASCII files (known as the Polygon\r\n * File Format or the Stanford Triangle Format).\r\n *\r\n * Limitations: ASCII decoding assumes file is UTF-8.\r\n *\r\n * Usage:\r\n *\tconst loader = new PLYLoader();\r\n *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\r\n *\r\n *\t\tscene.add( new THREE.Mesh( geometry ) );\r\n *\r\n *\t} );\r\n *\r\n * If the PLY file uses non standard property names, they can be mapped while\r\n * loading. For example, the following maps the properties\r\n * “diffuse_(red|green|blue)” in the file to standard color names.\r\n *\r\n * loader.setPropertyNameMapping( {\r\n *\tdiffuse_red: 'red',\r\n *\tdiffuse_green: 'green',\r\n *\tdiffuse_blue: 'blue'\r\n * } );\r\n *\r\n * Custom properties outside of the defaults for position, uv, normal\r\n * and color attributes can be added using the setCustomPropertyNameMapping method.\r\n * For example, the following maps the element properties “custom_property_a”\r\n * and “custom_property_b” to an attribute “customAttribute” with an item size of 2.\r\n * Attribute item sizes are set from the number of element properties in the property array.\r\n *\r\n * loader.setCustomPropertyNameMapping( {\r\n *\tcustomAttribute: ['custom_property_a', 'custom_property_b'],\r\n * } );\r\n *\r\n */\r\n\r\nconst _color = new Color();\r\n\r\nclass PLYLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t\tthis.propertyNameMapping = {};\r\n\t\tthis.customPropertyMapping = {};\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( text ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tsetPropertyNameMapping( mapping ) {\r\n\r\n\t\tthis.propertyNameMapping = mapping;\r\n\r\n\t}\r\n\r\n\tsetCustomPropertyNameMapping( mapping ) {\r\n\r\n\t\tthis.customPropertyMapping = mapping;\r\n\r\n\t}\r\n\r\n\tparse( data ) {\r\n\r\n\t\tfunction parseHeader( data, headerLength = 0 ) {\r\n\r\n\t\t\tconst patternHeader = /^ply([\\s\\S]*)end_header(\\r\\n|\\r|\\n)/;\r\n\t\t\tlet headerText = '';\r\n\t\t\tconst result = patternHeader.exec( data );\r\n\r\n\t\t\tif ( result !== null ) {\r\n\r\n\t\t\t\theaderText = result[ 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst header = {\r\n\t\t\t\tcomments: [],\r\n\t\t\t\telements: [],\r\n\t\t\t\theaderLength: headerLength,\r\n\t\t\t\tobjInfo: ''\r\n\t\t\t};\r\n\r\n\t\t\tconst lines = headerText.split( /\\r\\n|\\r|\\n/ );\r\n\t\t\tlet currentElement;\r\n\r\n\t\t\tfunction make_ply_element_property( propertyValues, propertyNameMapping ) {\r\n\r\n\t\t\t\tconst property = { type: propertyValues[ 0 ] };\r\n\r\n\t\t\t\tif ( property.type === 'list' ) {\r\n\r\n\t\t\t\t\tproperty.name = propertyValues[ 3 ];\r\n\t\t\t\t\tproperty.countType = propertyValues[ 1 ];\r\n\t\t\t\t\tproperty.itemType = propertyValues[ 2 ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tproperty.name = propertyValues[ 1 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( property.name in propertyNameMapping ) {\r\n\r\n\t\t\t\t\tproperty.name = propertyNameMapping[ property.name ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn property;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let i = 0; i < lines.length; i ++ ) {\r\n\r\n\t\t\t\tlet line = lines[ i ];\r\n\t\t\t\tline = line.trim();\r\n\r\n\t\t\t\tif ( line === '' ) continue;\r\n\r\n\t\t\t\tconst lineValues = line.split( /\\s+/ );\r\n\t\t\t\tconst lineType = lineValues.shift();\r\n\t\t\t\tline = lineValues.join( ' ' );\r\n\r\n\t\t\t\tswitch ( lineType ) {\r\n\r\n\t\t\t\t\tcase 'format':\r\n\r\n\t\t\t\t\t\theader.format = lineValues[ 0 ];\r\n\t\t\t\t\t\theader.version = lineValues[ 1 ];\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'comment':\r\n\r\n\t\t\t\t\t\theader.comments.push( line );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'element':\r\n\r\n\t\t\t\t\t\tif ( currentElement !== undefined ) {\r\n\r\n\t\t\t\t\t\t\theader.elements.push( currentElement );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentElement = {};\r\n\t\t\t\t\t\tcurrentElement.name = lineValues[ 0 ];\r\n\t\t\t\t\t\tcurrentElement.count = parseInt( lineValues[ 1 ] );\r\n\t\t\t\t\t\tcurrentElement.properties = [];\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'property':\r\n\r\n\t\t\t\t\t\tcurrentElement.properties.push( make_ply_element_property( lineValues, scope.propertyNameMapping ) );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'obj_info':\r\n\r\n\t\t\t\t\t\theader.objInfo = line;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tconsole.log( 'unhandled', lineType, lineValues );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( currentElement !== undefined ) {\r\n\r\n\t\t\t\theader.elements.push( currentElement );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn header;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseASCIINumber( n, type ) {\r\n\r\n\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\tcase 'char': case 'uchar': case 'short': case 'ushort': case 'int': case 'uint':\r\n\t\t\t\tcase 'int8': case 'uint8': case 'int16': case 'uint16': case 'int32': case 'uint32':\r\n\r\n\t\t\t\t\treturn parseInt( n );\r\n\r\n\t\t\t\tcase 'float': case 'double': case 'float32': case 'float64':\r\n\r\n\t\t\t\t\treturn parseFloat( n );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseASCIIElement( properties, tokens ) {\r\n\r\n\t\t\tconst element = {};\r\n\r\n\t\t\tfor ( let i = 0; i < properties.length; i ++ ) {\r\n\r\n\t\t\t\tif ( tokens.empty() ) return null;\r\n\r\n\t\t\t\tif ( properties[ i ].type === 'list' ) {\r\n\r\n\t\t\t\t\tconst list = [];\r\n\t\t\t\t\tconst n = parseASCIINumber( tokens.next(), properties[ i ].countType );\r\n\r\n\t\t\t\t\tfor ( let j = 0; j < n; j ++ ) {\r\n\r\n\t\t\t\t\t\tif ( tokens.empty() ) return null;\r\n\r\n\t\t\t\t\t\tlist.push( parseASCIINumber( tokens.next(), properties[ i ].itemType ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\telement[ properties[ i ].name ] = list;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\telement[ properties[ i ].name ] = parseASCIINumber( tokens.next(), properties[ i ].type );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn element;\r\n\r\n\t\t}\r\n\r\n\t\tfunction createBuffer() {\r\n\r\n\t\t\tconst buffer = {\r\n\t\t\t  indices: [],\r\n\t\t\t  vertices: [],\r\n\t\t\t  normals: [],\r\n\t\t\t  uvs: [],\r\n\t\t\t  faceVertexUvs: [],\r\n\t\t\t  colors: [],\r\n\t\t\t  faceVertexColors: []\r\n\t\t\t};\r\n\r\n\t\t\tfor ( const customProperty of Object.keys( scope.customPropertyMapping ) ) {\r\n\r\n\t\t\t  buffer[ customProperty ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buffer;\r\n\r\n\t\t}\r\n\r\n\t\tfunction mapElementAttributes( properties ) {\r\n\r\n\t\t\tconst elementNames = properties.map( property => {\r\n\r\n\t\t\t\treturn property.name;\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tfunction findAttrName( names ) {\r\n\r\n\t\t\t\tfor ( let i = 0, l = names.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tconst name = names[ i ];\r\n\r\n\t\t\t\t\tif ( elementNames.includes( name ) ) return name;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tattrX: findAttrName( [ 'x', 'px', 'posx' ] ) || 'x',\r\n\t\t\t\tattrY: findAttrName( [ 'y', 'py', 'posy' ] ) || 'y',\r\n\t\t\t\tattrZ: findAttrName( [ 'z', 'pz', 'posz' ] ) || 'z',\r\n\t\t\t\tattrNX: findAttrName( [ 'nx', 'normalx' ] ),\r\n\t\t\t\tattrNY: findAttrName( [ 'ny', 'normaly' ] ),\r\n\t\t\t\tattrNZ: findAttrName( [ 'nz', 'normalz' ] ),\r\n\t\t\t\tattrS: findAttrName( [ 's', 'u', 'texture_u', 'tx' ] ),\r\n\t\t\t\tattrT: findAttrName( [ 't', 'v', 'texture_v', 'ty' ] ),\r\n\t\t\t\tattrR: findAttrName( [ 'red', 'diffuse_red', 'r', 'diffuse_r' ] ),\r\n\t\t\t\tattrG: findAttrName( [ 'green', 'diffuse_green', 'g', 'diffuse_g' ] ),\r\n\t\t\t\tattrB: findAttrName( [ 'blue', 'diffuse_blue', 'b', 'diffuse_b' ] ),\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseASCII( data, header ) {\r\n\r\n\t\t\t// PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\r\n\r\n\t\t\tconst buffer = createBuffer();\r\n\r\n\t\t\tconst patternBody = /end_header\\s+(\\S[\\s\\S]*\\S|\\S)\\s*$/;\r\n\t\t\tlet body, matches;\r\n\r\n\t\t\tif ( ( matches = patternBody.exec( data ) ) !== null ) {\r\n\r\n\t\t\t\tbody = matches[ 1 ].split( /\\s+/ );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbody = [ ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst tokens = new ArrayStream( body );\r\n\r\n\t\t\tloop: for ( let i = 0; i < header.elements.length; i ++ ) {\r\n\r\n\t\t\t\tconst elementDesc = header.elements[ i ];\r\n\t\t\t\tconst attributeMap = mapElementAttributes( elementDesc.properties );\r\n\r\n\t\t\t\tfor ( let j = 0; j < elementDesc.count; j ++ ) {\r\n\r\n\t\t\t\t\tconst element = parseASCIIElement( elementDesc.properties, tokens );\r\n\r\n\t\t\t\t\tif ( ! element ) break loop;\r\n\r\n\t\t\t\t\thandleElement( buffer, elementDesc.name, element, attributeMap );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn postProcess( buffer );\r\n\r\n\t\t}\r\n\r\n\t\tfunction postProcess( buffer ) {\r\n\r\n\t\t\tlet geometry = new BufferGeometry();\r\n\r\n\t\t\t// mandatory buffer data\r\n\r\n\t\t\tif ( buffer.indices.length > 0 ) {\r\n\r\n\t\t\t\tgeometry.setIndex( buffer.indices );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( buffer.vertices, 3 ) );\r\n\r\n\t\t\t// optional buffer data\r\n\r\n\t\t\tif ( buffer.normals.length > 0 ) {\r\n\r\n\t\t\t\tgeometry.setAttribute( 'normal', new Float32BufferAttribute( buffer.normals, 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( buffer.uvs.length > 0 ) {\r\n\r\n\t\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( buffer.uvs, 2 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( buffer.colors.length > 0 ) {\r\n\r\n\t\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( buffer.colors, 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( buffer.faceVertexUvs.length > 0 || buffer.faceVertexColors.length > 0 ) {\r\n\r\n\t\t\t\tgeometry = geometry.toNonIndexed();\r\n\r\n\t\t\t\tif ( buffer.faceVertexUvs.length > 0 ) geometry.setAttribute( 'uv', new Float32BufferAttribute( buffer.faceVertexUvs, 2 ) );\r\n\t\t\t\tif ( buffer.faceVertexColors.length > 0 ) geometry.setAttribute( 'color', new Float32BufferAttribute( buffer.faceVertexColors, 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// custom buffer data\r\n\r\n\t\t\tfor ( const customProperty of Object.keys( scope.customPropertyMapping ) ) {\r\n\r\n\t\t\t\tif ( buffer[ customProperty ].length > 0 ) {\r\n\r\n\t\t\t\t  \tgeometry.setAttribute(\r\n\t\t\t\t\t\tcustomProperty,\r\n\t\t\t\t\t\tnew Float32BufferAttribute(\r\n\t\t\t\t\t  \t\tbuffer[ customProperty ],\r\n\t\t\t\t\t  \t\tscope.customPropertyMapping[ customProperty ].length\r\n\t\t\t\t\t\t)\r\n\t\t\t\t  \t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t\tfunction handleElement( buffer, elementName, element, cacheEntry ) {\r\n\r\n\t\t\tif ( elementName === 'vertex' ) {\r\n\r\n\t\t\t\tbuffer.vertices.push( element[ cacheEntry.attrX ], element[ cacheEntry.attrY ], element[ cacheEntry.attrZ ] );\r\n\r\n\t\t\t\tif ( cacheEntry.attrNX !== null && cacheEntry.attrNY !== null && cacheEntry.attrNZ !== null ) {\r\n\r\n\t\t\t\t\tbuffer.normals.push( element[ cacheEntry.attrNX ], element[ cacheEntry.attrNY ], element[ cacheEntry.attrNZ ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( cacheEntry.attrS !== null && cacheEntry.attrT !== null ) {\r\n\r\n\t\t\t\t\tbuffer.uvs.push( element[ cacheEntry.attrS ], element[ cacheEntry.attrT ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( cacheEntry.attrR !== null && cacheEntry.attrG !== null && cacheEntry.attrB !== null ) {\r\n\r\n\t\t\t\t\t_color.setRGB(\r\n\t\t\t\t\t\telement[ cacheEntry.attrR ] / 255.0,\r\n\t\t\t\t\t\telement[ cacheEntry.attrG ] / 255.0,\r\n\t\t\t\t\t\telement[ cacheEntry.attrB ] / 255.0,\r\n\t\t\t\t\t\tSRGBColorSpace\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbuffer.colors.push( _color.r, _color.g, _color.b );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( const customProperty of Object.keys( scope.customPropertyMapping ) ) {\r\n\r\n\t\t\t\t\tfor ( const elementProperty of scope.customPropertyMapping[ customProperty ] ) {\r\n\r\n\t\t\t\t\t  buffer[ customProperty ].push( element[ elementProperty ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( elementName === 'face' ) {\r\n\r\n\t\t\t\tconst vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\r\n\t\t\t\tconst texcoord = element.texcoord;\r\n\r\n\t\t\t\tif ( vertex_indices.length === 3 ) {\r\n\r\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 2 ] );\r\n\r\n\t\t\t\t\tif ( texcoord && texcoord.length === 6 ) {\r\n\r\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 0 ], texcoord[ 1 ] );\r\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 2 ], texcoord[ 3 ] );\r\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 4 ], texcoord[ 5 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( vertex_indices.length === 4 ) {\r\n\r\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 3 ] );\r\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 1 ], vertex_indices[ 2 ], vertex_indices[ 3 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// face colors\r\n\r\n\t\t\t\tif ( cacheEntry.attrR !== null && cacheEntry.attrG !== null && cacheEntry.attrB !== null ) {\r\n\r\n\t\t\t\t\t_color.setRGB(\r\n\t\t\t\t\t\telement[ cacheEntry.attrR ] / 255.0,\r\n\t\t\t\t\t\telement[ cacheEntry.attrG ] / 255.0,\r\n\t\t\t\t\t\telement[ cacheEntry.attrB ] / 255.0,\r\n\t\t\t\t\t\tSRGBColorSpace\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbuffer.faceVertexColors.push( _color.r, _color.g, _color.b );\r\n\t\t\t\t\tbuffer.faceVertexColors.push( _color.r, _color.g, _color.b );\r\n\t\t\t\t\tbuffer.faceVertexColors.push( _color.r, _color.g, _color.b );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction binaryReadElement( at, properties ) {\r\n\r\n\t\t\tconst element = {};\r\n\t\t\tlet read = 0;\r\n\r\n\t\t\tfor ( let i = 0; i < properties.length; i ++ ) {\r\n\r\n\t\t\t\tconst property = properties[ i ];\r\n\t\t\t\tconst valueReader = property.valueReader;\r\n\r\n\t\t\t\tif ( property.type === 'list' ) {\r\n\r\n\t\t\t\t\tconst list = [];\r\n\r\n\t\t\t\t\tconst n = property.countReader.read( at + read );\r\n\t\t\t\t\tread += property.countReader.size;\r\n\r\n\t\t\t\t\tfor ( let j = 0; j < n; j ++ ) {\r\n\r\n\t\t\t\t\t\tlist.push( valueReader.read( at + read ) );\r\n\t\t\t\t\t\tread += valueReader.size;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\telement[ property.name ] = list;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\telement[ property.name ] = valueReader.read( at + read );\r\n\t\t\t\t\tread += valueReader.size;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn [ element, read ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction setPropertyBinaryReaders( properties, body, little_endian ) {\r\n\r\n\t\t\tfunction getBinaryReader( dataview, type, little_endian ) {\r\n\r\n\t\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\t\t// correspondences for non-specific length types here match rply:\r\n\t\t\t\t\tcase 'int8':\tcase 'char':\treturn { read: ( at ) => {\r\n\r\n\t\t\t\t\t\treturn dataview.getInt8( at );\r\n\r\n\t\t\t\t\t}, size: 1 };\r\n\t\t\t\t\tcase 'uint8':\tcase 'uchar':\treturn { read: ( at ) => {\r\n\r\n\t\t\t\t\t\treturn dataview.getUint8( at );\r\n\r\n\t\t\t\t\t}, size: 1 };\r\n\t\t\t\t\tcase 'int16':\tcase 'short':\treturn { read: ( at ) => {\r\n\r\n\t\t\t\t\t\treturn dataview.getInt16( at, little_endian );\r\n\r\n\t\t\t\t\t}, size: 2 };\r\n\t\t\t\t\tcase 'uint16':\tcase 'ushort':\treturn { read: ( at ) => {\r\n\r\n\t\t\t\t\t\treturn dataview.getUint16( at, little_endian );\r\n\r\n\t\t\t\t\t}, size: 2 };\r\n\t\t\t\t\tcase 'int32':\tcase 'int':\t\treturn { read: ( at ) => {\r\n\r\n\t\t\t\t\t\treturn dataview.getInt32( at, little_endian );\r\n\r\n\t\t\t\t\t}, size: 4 };\r\n\t\t\t\t\tcase 'uint32':\tcase 'uint':\treturn { read: ( at ) => {\r\n\r\n\t\t\t\t\t\treturn dataview.getUint32( at, little_endian );\r\n\r\n\t\t\t\t\t}, size: 4 };\r\n\t\t\t\t\tcase 'float32': case 'float':\treturn { read: ( at ) => {\r\n\r\n\t\t\t\t\t\treturn dataview.getFloat32( at, little_endian );\r\n\r\n\t\t\t\t\t}, size: 4 };\r\n\t\t\t\t\tcase 'float64': case 'double':\treturn { read: ( at ) => {\r\n\r\n\t\t\t\t\t\treturn dataview.getFloat64( at, little_endian );\r\n\r\n\t\t\t\t\t}, size: 8 };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let i = 0, l = properties.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst property = properties[ i ];\r\n\r\n\t\t\t\tif ( property.type === 'list' ) {\r\n\r\n\t\t\t\t\tproperty.countReader = getBinaryReader( body, property.countType, little_endian );\r\n\t\t\t\t\tproperty.valueReader = getBinaryReader( body, property.itemType, little_endian );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tproperty.valueReader = getBinaryReader( body, property.type, little_endian );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseBinary( data, header ) {\r\n\r\n\t\t\tconst buffer = createBuffer();\r\n\r\n\t\t\tconst little_endian = ( header.format === 'binary_little_endian' );\r\n\t\t\tconst body = new DataView( data, header.headerLength );\r\n\t\t\tlet result, loc = 0;\r\n\r\n\t\t\tfor ( let currentElement = 0; currentElement < header.elements.length; currentElement ++ ) {\r\n\r\n\t\t\t\tconst elementDesc = header.elements[ currentElement ];\r\n\t\t\t\tconst properties = elementDesc.properties;\r\n\t\t\t\tconst attributeMap = mapElementAttributes( properties );\r\n\r\n\t\t\t\tsetPropertyBinaryReaders( properties, body, little_endian );\r\n\r\n\t\t\t\tfor ( let currentElementCount = 0; currentElementCount < elementDesc.count; currentElementCount ++ ) {\r\n\r\n\t\t\t\t\tresult = binaryReadElement( loc, properties );\r\n\t\t\t\t\tloc += result[ 1 ];\r\n\t\t\t\t\tconst element = result[ 0 ];\r\n\r\n\t\t\t\t\thandleElement( buffer, elementDesc.name, element, attributeMap );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn postProcess( buffer );\r\n\r\n\t\t}\r\n\r\n\t\tfunction extractHeaderText( bytes ) {\r\n\r\n\t\t\tlet i = 0;\r\n\t\t\tlet cont = true;\r\n\r\n\t\t\tlet line = '';\r\n\t\t\tconst lines = [];\r\n\r\n\t\t\tconst startLine = new TextDecoder().decode( bytes.subarray( 0, 5 ) );\r\n\t\t\tconst hasCRNL = /^ply\\r\\n/.test( startLine );\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\tconst c = String.fromCharCode( bytes[ i ++ ] );\r\n\r\n\t\t\t\tif ( c !== '\\n' && c !== '\\r' ) {\r\n\r\n\t\t\t\t\tline += c;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( line === 'end_header' ) cont = false;\r\n\t\t\t\t\tif ( line !== '' ) {\r\n\r\n\t\t\t\t\t\tlines.push( line );\r\n\t\t\t\t\t\tline = '';\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} while ( cont && i < bytes.length );\r\n\r\n\t\t\t// ascii section using \\r\\n as line endings\r\n\t\t\tif ( hasCRNL === true ) i ++;\r\n\r\n\t\t\treturn { headerText: lines.join( '\\r' ) + '\\r', headerLength: i };\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tlet geometry;\r\n\t\tconst scope = this;\r\n\r\n\t\tif ( data instanceof ArrayBuffer ) {\r\n\r\n\t\t\tconst bytes = new Uint8Array( data );\r\n\t\t\tconst { headerText, headerLength } = extractHeaderText( bytes );\r\n\t\t\tconst header = parseHeader( headerText, headerLength );\r\n\r\n\t\t\tif ( header.format === 'ascii' ) {\r\n\r\n\t\t\t\tconst text = new TextDecoder().decode( bytes );\r\n\r\n\t\t\t\tgeometry = parseASCII( text, header );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgeometry = parseBinary( data, header );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgeometry = parseASCII( data, parseHeader( data ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass ArrayStream {\r\n\r\n\tconstructor( arr ) {\r\n\r\n\t\tthis.arr = arr;\r\n\t\tthis.i = 0;\r\n\r\n\t}\r\n\r\n\tempty() {\r\n\r\n\t\treturn this.i >= this.arr.length;\r\n\r\n\t}\r\n\r\n\tnext() {\r\n\r\n\t\treturn this.arr[ this.i ++ ];\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PLYLoader };\r\n"],
  "mappings": "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",
  "names": ["data", "geometry", "little_endian"]
}
